At Facebook, we use MySQL to manage tens of petabytes of data in our main database called User Database (UDB) that serves social activities such as likes, comments, and shares. We used InnoDB, a B+Tree based storage engine as the backend, but we wanted an index structure with less space and write amplification. LSM-tree had potential to greatly improve these two bottlenecks. RocksDB, a LSM-tree based storage engine, was already widely used in variety of applications, but had a very low level key-value interface. We built MyRocks, a new MySQL storage engine, on top of RocksDB, by adding transactional interfaces and implementing relational capabilities. With MyRocks, we achieved significant efficiency gains while still benefiting from all the features and tools  in MySQL. The transition was mostly transparent to client applications.
In 2017, we completed migrating UDB from InnoDB to MyRocks. We have continued to improve operations in production and to enhance MySQL, MyRocks, and RocksDB, resulting in great efficiency wins. MyRocks reduced the instance size by 62.3% for UDB data sets and performed fewer I/O operations than InnoDB. MyRocks consumed less CPU time for serving the same production traffic workload. These gains enabled us to reduce the number of database servers in UDB to less than half, which saved significant resources. In this paper, we describe our journey to build and run an OLTP LSM-tree SQL database at scale. We will discuss features we implemented in RocksDB and MyRocks to keep up with UDB workloads, what made migrations easier, and what operational and software development challenges we faced during two years of running MyRocks in production.
